"use strict";var API,AWS,_,async,gutil,through2;gutil=require("gulp-util"),through2=require("through2"),async=require("async"),_=require("lodash"),AWS=require("aws-sdk"),API={_log:function(n,e){return gutil.log(gutil.colors.yellow("AWS LAMBDA Function")+" '"+gutil.colors.magenta(n)+"' :  "+e)},uploadToS3:function(n,e){return function(o){var t;return _.isEmpty(e.Code.S3Bucket)||_.isEmpty(e.Code.S3Key)||_.isEmpty(e.Code.ZipFile)?o(null,{}):(API._log(e.FunctionName,"Uploading to S3..."),t={Bucket:e.Code.S3Bucket,Key:e.Code.S3Key,Body:e.Code.ZipFile},console.log(t),n.putObject(t,function(n,e){return console.log(n,e),o(n,e)}))}},getFunction:function(n,e){return function(o,t){var i;return API._log(e.FunctionName,"Getting function..."),i={FunctionName:e.FunctionName},n.getFunction(i,function(n,e){return 404===(null!=n?n.statusCode:void 0)&&(n=null,e=404),t(n,e)})}},createFunction:function(n,e){return function(o,t){return 404!==o?t(null,o):(API._log(e.FunctionName,"Creating function..."),e.Code.S3Bucket&&(e.Code=_.omit(e.Code,["ZipFile","S3ObjectVersion"])),n.createFunction(e,function(n,e){return t(n,404)}))}},updateFunctionCode:function(n,e){return function(o,t){var i;return 404===o?t(null,404):(API._log(e.FunctionName,"Updating function code..."),e.Code.S3Bucket&&(e.Code=_.omit(e.Code,["ZipFile","S3ObjectVersion"])),i={FunctionName:e.FunctionName,Publish:e.Publish,S3Bucket:e.Code.S3Bucket,S3Key:e.Code.S3Key,S3ObjectVersion:e.Code.S3ObjectVersion,ZipFile:e.Code.ZipFile},e.Code.S3Bucket&&(i=_.omit(i,["ZipFile","S3ObjectVersion"])),n.updateFunctionCode(i,function(n,e){return t(n,e)}))}},updateFunctionConfiguration:function(n,e){return function(o,t){var i;return 404===o?t(null,404):(API._log(e.FunctionName,"Updating function configuration..."),i={FunctionName:e.FunctionName,Description:e.Description,Handler:e.Handler,MemorySize:e.MemorySize,Role:e.Role},n.updateFunctionConfiguration(i,function(n,e){return t(n,e)}))}}},module.exports=function(n,e){return through2.obj(function(o,t,i){var u,r;return r=new AWS.S3(n),u=new AWS.Lambda(n),e=_.defaults(e,{FunctionName:"",Description:"A short, user-defined function description. Assign a meaningful description as you see fit.",Handler:"index.handler",Runtime:"nodejs",Role:void 0,Timeout:10,MemorySize:128,Publish:!0,Code:{}}),e.Code=_.defaults(e.Code,{S3Bucket:void 0,S3Key:void 0,S3ObjectVersion:void 0,ZipFile:o.contents}),API._log(e.FunctionName,"Starting"),async.waterfall([API.uploadToS3(r,e),API.getFunction(u,e),API.createFunction(u,e),API.updateFunctionCode(u,e),API.updateFunctionConfiguration(u,e)],function(n,t){return API._log(e.FunctionName,"Finished"),n&&gutil.log(gutil.colors.red(n)),i(n,o)})})};